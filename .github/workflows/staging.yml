# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: run lint
      run: |
       ls -al $PWD
       yarn
       yarn run lint
  
    - name: Upload math result for lint
      uses: actions/upload-artifact@v1
      with:
        name: linted
        path: ${{ github.action.path }}

  build:
    runs-on: ubuntu-latest
    needs: lint
    env:
      STAGING_CONFIG: ${{ secrets.STAGING_CONFIG }}
      STAGING_SEQUELIZE: ${{ secrets.STAGING_SEQUELIZE }}
    steps:
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: linted

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Config Set up
      run: |
       echo $STAGING_CONFIG >> $GITHUB_ACTION_PATH/configures/config.yml
       echo $STAGING_SEQUELIZE >>  $GITHUB_ACTION_PATH/configures/sequelize.json

    - name: run build
      run: yarn run build

    - name: Upload math result for lint
      uses: actions/upload-artifact@v1
      with:
        name: built
        path: ${{ github.action.path }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download math result for job 1
      uses: actions/download-artifact@v1
      with:
        name: built
        
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.STAGING_SSH_KEY }} 

    - name: Deploy to Staging server
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
        SOURCE: "./dist/"
        REMOTE_PORT: ${{ secrets.STAGING_REMOTE_PORT }}
        REMOTE_HOST: ${{ secrets.STAGING_REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.STAGING_REMOTE_USER }}
        TARGET: ${{ secrets.STAGING_REMOTE_PATH }}

    - name: restart server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_REMOTE_HOST }}
        username: ${{ secrets.STAGING_REMOTE_USER }}
        port: ${{ secrets.STAGING_REMOTE_PORT }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: pm2 restart staging
